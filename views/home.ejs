<!DOCTYPE html>
<html>
  <head>
    <% include partials/title %>
    <% include partials/bootstrap %>
    <% include partials/leaflet %>
    <% include partials/chroma %>
    <% include partials/plotly %>
    <% include partials/air-datepicker %>
    <% include partials/moment %>
    <script src="lib/grid2geojson.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <% page_name = 'home' %>
    <% include partials/navbar %>
    <div class="container-fluid">

      <div class="row">
        <div class="col">
          <h1>Climate Data Visualization</h1>
        </div>
      </div>

      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="dataset" class="col-md-3 col-form-label">Dataset</label>
            <div class="col-md-9">
              <select id="dataset" name="dataset" class="form-control form-control-sm" onchange="changeDataset(event);">
                <option selected><%= selector[0].dataset %></option>
                <% for(var i=1; i<selector.length; i++){ %>
                  <option><%= selector[i].dataset %></option>
                <% } %>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-4">
          <div class="row">
            <label for="geoVariable" class="col-md-3 col-form-label">Geo Variable</label>
            <div class="col-md-9">
              <select id="geoVariable" name="geoVariable" class="form-control form-control-sm">
                <option selected value='<%= selector[0].geoVariables[0].name %>'><%= selector[0].geoVariables[0].longName %></option>
                <% for(var i=1; i<selector[0].geoVariables.length; i++){ %>
                  <option value='<%= selector[0].geoVariables[i].name %>'><%= selector[0].geoVariables[i].longName %> %></option>
                <% } %>
              </select>
            </div>
          </div>
        </div>

        <div class="col-md-4">
          <div class="row">
            <label for="stationVariable" class="col-md-2 col-form-label">Station</label>
            <div class="col-md-9">
              <select id="stationVariable" name="stationVariable" class="form-control form-control-sm">
                <option selected><%= selector[0].stationVariables[0] %></option>
                <% for(var i=1; i<selector[0].stationVariables.length; i++){ %>
                  <option><%= selector[0].stationVariables[i] %> %></option>
                <% } %>
              </select>
            </div>
          </div>
        </div>

      </div>

      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="frequency" class="col-md-3 col-form-label">Frequency</label>
            <div class="col-md-9">
              <select id="frequency" name="frequency" class="form-control form-control-sm" onchange="changeFrequency(event);">
                <option selected><%= selector[0].frequency[0] %></option>
                <% for(var i=1; i<selector[0].frequency.length; i++){ %>
                  <option><%= selector[0].frequency[i] %> %></option>
                <% } %>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-4">
          <div class="row">

            <label for="date" class="col-md-3 col-form-label">Date</label>
            <div class="col-md-9">
              <input type="text" id='date' name='date' 
                class="form-control form-control-sm datepicker-here"
                data-language='en'
                data-position='bottom left'/>
            </div>

          </div>
        </div>

        <div class="col-md-5">
          <button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#advanceOptionsPanel" aria-expanded="false" aria-controls="advanceOptionsPanel">Advance Options</button>
          <button type="button" class="btn btn-success" onclick='visualize()'>Visualize</button>
        </div>

      </div>

      <div class='collapse' id='datepicker-collapse'>
        <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
      </div>

      <div class="collapse" id="advanceOptionsPanel">
        <div class="row">

          <div class="col-md-6">
            <div class="row">
              <label for="lat1" class="col-md-1 col-form-label">Lat1</label>
              <div class="col-md-2">
                <input type="text" id='lat1' name='lat1' class="form-control form-control-sm" value='All'/>
              </div>
              <label for="lon1" class="col-md-1 col-form-label">Lon1</label>
              <div class="col-md-2">
                <input type="text" id='lon1' name='lon1' class="form-control form-control-sm" value='All'/>
              </div>

              <label for="lat2" class="col-md-1 col-form-label">Lat2</label>
              <div class="col-md-2">
                <input type="text" id='lat2' name='lat2' class="form-control form-control-sm" value='All'/>
              </div>
              <label for="lon2" class="col-md-1 col-form-label">Lon2</label>
              <div class="col-md-2">
                <input type="text" id='lon2' name='lo2' class="form-control form-control-sm" value='All'/>
              </div>
            </div>
          </div>

          <div class="col-md-2">
            <button type="button" class="btn btn-primary btn-sm" data-toggle="button" aria-pressed="false" onclick='cropRegion()'>Crop</button>
            <button type="button" class="btn btn-warning btn-sm" onclick='resetRegion()'>Reset</button>
          </div>
        
        </div>
      </div>

      <div class="row">
        <div class="col-md-7">
          <div id="map" class="map"></div>
        </div>
        <div class="col-md-5">
          <div class="row">
            <div class="col">
              <div id="graphData" class="graph"></div>
            </div>
          </div>
          <div class="row">
            <div class="col">
              <div id="graphEachMonth" class="graph"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-md-2">
        </div>
        <div class="col-md-8">
          <div id="graphLongTerm" class="graph-lg"></div>
        </div>
      </div>

      <br><br>

    </div>

<script>

  class Basemap {
    constructor(rootTag, options) {
      options.center = L.latLngBounds(options.maxBounds).getCenter();
      this.map = L.map(rootTag, options);
      this.layer = {}
      this.layer.basemap = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}', {
          ext: 'png'
      });
      this.layer.geojson = [];
      this.marker = [];
      this.legend = [];
      this.map.addLayer(this.layer.basemap);
      
    }
    addGeoJSON(geojson, options) {
      let geojsonLayer = L.geoJSON(geojson, options);
      this.map.addLayer(geojsonLayer);
      this.layer.geojson.push(geojsonLayer);
    }
    addClimateData(geojson, color, range, discrete, variable_unit) {
      /*
        geojson = grid climate data in geojson
        color = color of scale ex 'RdBu' , ['blue','teal','pink','red']
        range = [startValue, endValue]
        discrete = seperate gradient color to discrete color
      */
      let scale = chroma.scale(color).domain(range).classes(discrete);
      this.addGeoJSON(geojson, {
        style: function (feature) {
          let s = {};
          s.fillColor = scale(feature.properties.value).hex();
          s.fillOpacity = 0.8;
          s.stroke = false;
          s.fillRule = 'nonzero';
          return s;
        }
      });

      var map = this.map;
      var legend = L.control({position: 'topright'});
      legend.onAdd = function (map) {
        let div = L.DomUtil.create('div', 'info legend');
        let colors = scale.colors(discrete);
        let rangeNumber = [];
        for(let i=0; i<discrete; i++) {
          let r = range[0] + ((range[1]-range[0])*i)/discrete
          rangeNumber.push(r)
        }

        for(let i=0; i<colors.length; i++) {
          div.innerHTML += '<i style="background:' + colors[i] + '"></i> ';
          if(i==0) {
            div.innerHTML += 'below ' + rangeNumber[i] + ' ' + variable_unit + '<br>';
          } else if(i!=colors.length-1) {
            div.innerHTML += rangeNumber[i] + '&ndash;' + rangeNumber[i + 1] + ' ' + variable_unit + '<br>';
          } else {
            div.innerHTML += 'over ' + rangeNumber[i] + ' ' + variable_unit;
          }
        }

        return div;
      };
      legend.addTo(map);
      this.legend.push(legend);
    }
    removeClimateData(){
      let geojsonLayer = this.layer.geojson.pop();
      this.map.removeLayer(geojsonLayer);
      let legend = this.legend.pop();
      this.map.removeControl(legend);
    }
    addStation(stationArray, variable, variable_unit) {
      var icn = new L.Icon.Default;
      icn.options.iconSize = [10,20];
      icn.options.iconAnchor = [0,0];
      icn.options.shadowSize = [0,0];
      icn.options.popupAnchor = [5,0];
      for(let i=0; i < stationArray.length; i++) {
        let stationData = stationArray[i];
        let map = this.map
        
        let markerOptions = {
          title: stationData.code,
          icon: icn
        }
        let marker;
        //if(variable != 'Rain'){
          marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
            .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>'+variable+': '+stationData.value+' '+variable_unit);  
        //} else {
        //  marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
        //    .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>'+variable+': '+((stationData.value==1)?'Fall':'Not fall'));  
        //}
        
        this.marker.push(marker);
      }
    }
    removeStation() {
      let stationLength = this.marker.length
      for(let i=0; i < stationLength; i++) {
        let marker = this.marker.pop()
        this.map.removeLayer(marker);
      }
    }
  }

</script>

<script>

  var selector_data = <%- JSON.stringify(selector) %>
  var selector_group = {}
  for(let i=0; i<selector_data.length; i++){ // convert array to json
    selector_group[selector_data[i].dataset] = selector_data[i]
  }

  var datepickerOptions = {
    language: 'en',
    minView: 'years',
    view: 'years',
    dateFormat: 'yyyy',
    range: true,
    multipleDatesSeparator: ' to ',
    minDate: new Date(selector_data[0].date.min),
    maxDate: new Date(selector_data[0].date.max),
    position: 'bottom left',
    onShow: function(dp, animationComplete){
      $('#datepicker-collapse').collapse('show');
    },
    onHide: function(dp, animationComplete){
      $('#datepicker-collapse').collapse('hide');
    }
  }
  var dpicker;
  var startDate = datepickerOptions.minDate;
  var endDate = datepickerOptions.maxDate;
  setTimeout(function(){
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }, 500);

  function changeDataset(event){
    var selected = selector_group[event.target.value];
    
    var geoVariableSelector = document.getElementById('geoVariable')
    while(geoVariableSelector.options.length){
      geoVariableSelector.remove(0);
    }
    for(let i=0; i<selected.geoVariables.length; i++){
      let option = document.createElement("option");
      option.value = selected.geoVariables[i].name;
      option.text = selected.geoVariables[i].longName;
      geoVariableSelector.add(option);
    }

    var stationVariableSelector = document.getElementById('stationVariable')
    while(stationVariableSelector.options.length){
      stationVariableSelector.remove(0);
    }
    for(let i=0; i<selected.stationVariables.length; i++){
      let option = document.createElement("option");
      option.text = selected.stationVariables[i];
      stationVariableSelector.add(option);
    }

    datepickerOptions.minDate = new Date(selected.date.min);
    datepickerOptions.maxDate = new Date(selected.date.max);
    startDate = datepickerOptions.minDate;
    endDate = datepickerOptions.maxDate;
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }

  function changeFrequency(event){
    var frequency = event.target.value;
    var date = document.getElementById('date').value;
    startDate = new Date(date.split(' to ')[0]);
    endDate = new Date(date.split(' to ')[1]);
    if(frequency == 'Yearly'){
      datepickerOptions.minView = 'years';
      datepickerOptions.view = 'years';
      datepickerOptions.dateFormat = 'yyyy'
      climateOptions['pr'].range = [2000, 4000]
    } else if(frequency == 'Monthly'){
      datepickerOptions.minView = 'months';
      datepickerOptions.view = 'months';
      datepickerOptions.dateFormat = 'yyyy-mm'
      climateOptions['pr'].range = [100, 500]
    } else if(frequency == 'Daily'){
      datepickerOptions.minView = 'days';
      datepickerOptions.view = 'days';
      datepickerOptions.dateFormat = 'yyyy-mm-dd'
      climateOptions['pr'].range = [0, 100]
    }
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }

  function visualize() {
    let frequency = $('#frequency').val()
    let date = $('#date').val();
    let startDate;
    let endDate;
    if(date.split(' to ').length == 2) {
      if(frequency == 'Yearly') {
        startDate = moment(new Date(date.split(' to ')[0])).startOf('year').format('YYYY-MM-DD');
        endDate = moment(new Date(date.split(' to ')[1])).endOf('year').format('YYYY-MM-DD');
      } else if(frequency == 'Monthly') {
        //startDate = date.split(' to ')[0] + '-01T23:59:59.000Z';
        startDate = moment(new Date(date.split(' to ')[0])).startOf('month').format('YYYY-MM-DD');
        endDate = moment(new Date(date.split(' to ')[1])).endOf('month').format('YYYY-MM-DD');
      } else {
        startDate = moment(new Date(date.split(' to ')[0])).format('YYYY-MM-DD');
        endDate = moment(new Date(date.split(' to ')[1])).format('YYYY-MM-DD');
      }
    } else {
      if(date.split(' to ')[0] != '') {
        if(frequency == 'Yearly') {
          startDate = moment(new Date(date.split(' to ')[0])).startOf('year').format('YYYY-MM-DD')+'T00:00:00.000Z';
          endDate = moment(new Date(date.split(' to ')[0])).endOf('year').format('YYYY-MM-DD')+'T23:59:59.000Z';
        } else if(frequency == 'Monthly') {
          startDate = moment(new Date(date.split(' to ')[0])).startOf('month').format('YYYY-MM-DD')+'T00:00:00.000Z';
          endDate = moment(new Date(date.split(' to ')[0])).endOf('month').format('YYYY-MM-DD')+'T23:59:59.000Z';
        } else {
          startDate = moment(new Date(date.split(' to ')[0])).format('YYYY-MM-DD')+'T00:00:00.000Z';
          endDate = moment(new Date(date.split(' to ')[0])).format('YYYY-MM-DD')+'T23:59:59.000Z';
        }
      } else {
        return 0;
      }
    }
    $.ajax({
      url: '/api/geodata',
      data: {
        dataset: $('#dataset').val(),
        geoVariable: $('#geoVariable').val(),
        frequency: frequency,
        startDate: startDate,
        endDate: endDate
      },
      success: function(d) {
        map.removeClimateData();
        data = d.geoData
        geoJSON = toGeoJSON(lat, lon, mask, data);
        plotClimate(d.attribute, geoJSON, climateOptions);
      }
    });
    $.ajax({
      url: '/api/station',
      data: {
        dataset: $('#dataset').val(),
        stationVariable: $('#stationVariable').val(),
        frequency: frequency,
        startDate: startDate,
        endDate: endDate
      },
      success: function(d) {
        map.removeStation();
        plotStation(d.attribute, d.data, stationOptions);
      }
    });
    $.ajax({
      url: '/api/graphData',
      data: {
        dataset: $('#dataset').val(),
        geoVariable: $('#geoVariable').val(),
        stationVariable: $('#stationVariable').val(),
        frequency: frequency,
        startDate: startDate,
        endDate: endDate,
        lat1: $('#lat1').val(),
        lon1: $('#lon1').val(),
        lat2: $('#lat2').val(),
        lon2: $('#lon2').val()
      },
      success: function(d) {
        plotGraph(d.data);
      }
    });

    Plotly.purge('graphEachMonth');
    if(frequency == 'Yearly') {
      $.ajax({
        url: '/api/graphEachMonth',
        data: {
          dataset: $('#dataset').val(),
          geoVariable: $('#geoVariable').val(),
          frequency: frequency,
          startDate: startDate,
          endDate: endDate
        },
        success: function(d) {
          plotGraphEachMonth(d.data);
        }
      });
    }

    $.ajax({
      url: '/api/graphLongTerm',
      data: {
        geoVariable: $('#geoVariable').val(),
      },
      success: function(d) {
        plotGraphLongTerm(d.data);
      }
    });
  }
</script>

<script>
  /* graph data */
  var graphData = <%- JSON.stringify(graphData) %>
  function plotGraph(gData){
    let trace1 = {
      x: gData.geoData.dateList,
      y: gData.geoData.valueList,
      name: 'RCM Data',
      type: 'lines'
    };

    let trace2 = {
      x: gData.stationData.dateList,
      y: gData.stationData.valueList,
      name: 'Station Data',
      type: 'lines'
    };

    let data = [trace1, trace2];

    let layout = {
      title: 'Average of '+ gData.geoAttrLongName + ' (' + gData.unit + ')',
      xaxis: {
        autorange: true,
        type: 'date'
      },
      yaxis: {
        autorange: true,
        type: 'linear'
      }
    };
    Plotly.newPlot('graphData', data, layout);
  }
  plotGraph(graphData);

  /* graph each month */
  var gEachMonth = <%- JSON.stringify(graphEachMonthData) %>
  function plotGraphEachMonth(gData){
    let trace = {
      x: gData.monthList,
      y: gData.valueList,
      type: 'lines'
    };

    let data = [trace];

    let layout = {
      title: 'Average of '+ gData.geoAttrLongName +'<br>in Each Month' + ' (' + gData.unit + ')',
      xaxis: {
        autorange: true,
        type: 'string'
      },
      yaxis: {
        autorange: true,
        type: 'linear',
      }
    };
    Plotly.newPlot('graphEachMonth', data, layout);
  }
  plotGraphEachMonth(gEachMonth);

  /* graph long term */
  var gLongTerm = <%- JSON.stringify(graphLongTerm) %>
  function plotGraphLongTerm(gData){
    let trace1 = {
      x: gData.mpi_rf.dateList,
      y: gData.mpi_rf.valueList,
      name: 'MPI_RF',
      type: 'lines'
    };

    let trace2 = {
      x: gData.mpi_rcp45.dateList,
      y: gData.mpi_rcp45.valueList,
      name: 'MPI_RCP45',
      type: 'lines'
    };

    let data = [trace1, trace2];

    let layout = {
      title: 'Average of '+ gData.geoAttrLongName + ' (' + gData.unit + ') in Long Term',
      xaxis: {
        autorange: true,
        type: 'date'
      },
      yaxis: {
        autorange: true,
        type: 'linear',
      }
    };
    Plotly.newPlot('graphLongTerm', data, layout);
  }
  plotGraphLongTerm(gLongTerm);
</script>

<script>

  var map = new Basemap('map', {
    zoom: 4.3,
    minZoom: 4.3,
    maxZoom: 20,
    maxBounds: [[-14.8144, 89.4891],[26.9569, 146.5108]],
    preferCanvas: true
  });

  var attribute = <%- JSON.stringify(selector[0].geoVariables[0].name) %>
  var data = <%- JSON.stringify(geoData) %>
  var lat = <%- JSON.stringify(geoLat) %>
  var lon = <%- JSON.stringify(geoLon) %>
  var mask = <%- JSON.stringify(landMask) %>
  var geoJSON = toGeoJSON(lat, lon, mask, data);
  var stationAttribute = <%- JSON.stringify(selector[0].stationVariables[0]) %>
  var stationData = <%- JSON.stringify(stationData) %>
  var climateOptions = {
    'tas': {
      color: ['MediumBlue', 'LightYellow', 'Red'],
      //color: ['PaleGoldenRod', 'red'],
      range: [8, 38],
      discrete: 10,
      variable_unit: '°C'
    },
    'pr': {
      color: 'YlGnBu',
      range: [2000, 6000],
      discrete: 10,
      variable_unit: 'mm'
    }
  }
  var stationOptions = {
    'meantemp': {
      name: 'Mean Temperature',
      unit: '°C'
    },
    'rain': {
      name: 'Rainfall',
      unit: 'days'
    }
  }

  function plotClimate(cAttr, cData, climateOpt) {
    var cOptions = climateOpt[cAttr];
    map.addClimateData(cData, cOptions.color, cOptions.range, cOptions.discrete, cOptions.variable_unit);
  }
  function plotStation(sAttr, sData, stationOpt) {
    var sOptions = stationOpt[sAttr];
    map.addStation(sData, sOptions.name, sOptions.unit);
  }
  plotClimate(attribute, geoJSON, climateOptions);
  plotStation(stationAttribute, stationData, stationOptions);

  map.region = {
    isCroping: false,
    isSelecting: false,
    isPlotted: false,
    lat1: null,
    lon1: null,
    lat2: null,
    lon2: null,
    bounds: [[null, null],[null, null]],
    box: null
  }

  map.map.on('click', function(e) {
    if(map.region.isCroping) {
      let region = map.region;
      if(!region.isSelecting) {
        region.bounds[0][0] = e.latlng.lat;
        region.bounds[0][1] = e.latlng.lng;
        region.isSelecting = true;
        if(region.isPlotted) {
          map.map.removeLayer(region.box);
        }
        $('#lat1').val(e.latlng.lat);
        $('#lon1').val(e.latlng.lng);
        $('#lat2').val('');
        $('#lon2').val('');
      } else {
        region.bounds[1][0] = e.latlng.lat;
        region.bounds[1][1] = e.latlng.lng;
        region.isSelecting = false;
        region.isPlotted = true;
        region.box = L.rectangle(region.bounds, {color: "#000000", fillOpacity: 0, weight: 2}).addTo(map.map);
        $('#lat2').val(e.latlng.lat);
        $('#lon2').val(e.latlng.lng);
      }
    }
  });

  function cropRegion() {
    map.region.isCroping = !map.region.isCroping;
  }
  function resetRegion() {
    map.map.removeLayer(map.region.box);
    map.region = {
      isCroping: false,
      isSelecting: false,
      isPlotted: false,
      lat1: null,
      lon1: null,
      lat2: null,
      lon2: null,
      bounds: [[null, null],[null, null]],
      box: null
    }
    $('#lat1').val('All');
    $('#lon1').val('All');
    $('#lat2').val('All');
    $('#lon2').val('All');
  }

</script>

  </body>
</html>
