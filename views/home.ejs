<!DOCTYPE html>
<html>
  <head>
    <% include partials/title %>
    <% include partials/bootstrap %>
    <% include partials/leaflet %>
    <% include partials/chroma %>
    <% include partials/plotly %>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <% page_name = 'home' %>
    <% include partials/navbar %>
    <div class="container-fluid">

      <div class="row">
        <div class="col">
          <h1>Climate Data Visualization</h1>
        </div>
      </div>

      <br>
      <form action="/" method="GET">
      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="dataset_select" class="col-md-3 col-form-label">Dataset</label>
            <div class="col-md-9">
              <select id="dataset_select" name="dataset_select" class="form-control form-control-sm">
                <option <% if(dataset=='MPI_RF'){ %>selected<% } %>>MPI_RF</option>
                <option <% if(dataset=='MPI_RCP45'){ %>selected<% } %>>MPI_RCP45</option>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-5">
          <div class="row">
            <label for="attribute_select" class="col-md-2 col-form-label">Attribute</label>
            <div class="col-md-9">
              <select id="attribute_select" name="attribute_select" class="form-control form-control-sm">
                <option <% if(attribute=='tas'){ %>selected<% } %> value='tas'>Mean Air Temperautre</option>
                <option <% if(attribute=='pr'){ %>selected<% } %> value='pr'>Precipitation Flux</option>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-3">
        </div>

      </div>

      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="frequency_select" class="col-md-3 col-form-label">Frequency</label>
            <div class="col-md-9">
              <select id="frequency_select" name="frequency_select" class="form-control form-control-sm">
                <option <% if(frequency=='Daily'){ %>selected<% } %>>Daily</option>
                <option <% if(frequency=='Monthly'){ %>selected<% } %>>Monthly</option>
                <option <% if(frequency=='Yearly'){ %>selected<% } %>>Yearly</option>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-5">
          <div class="row">
            <label for="start_date" class="col-md-2 col-form-label">From</label>
            <div class="col-md-4">
              <input type="date" class="form-control form-control-sm" id="start_date" name="start_date" min="<%= date.min %>" max="<%= date.max %>" value="<%= date.start %>" onchange="changeEndDate(event);">
            </div>
            <label for="end_date" class="col-md-1 col-form-label">To</label>
            <div class="col-md-4">
              <input type="date" class="form-control form-control-sm" id="end_date" name="end_date" min="<%= date.min %>" max="<%= date.max %>" value="<%= date.end %>">
            </div>
          </div>
        </div>

        <div class="col-md-3">
          <button type="submit" class="btn btn-primary">Visualize</button>
        </div>

      </div>
      </form>

      <div class="row">
        <div class="col-md-7">
          <% var attr = attribute %>
          <% var data = geojson %>
          <% var sData = stationData %>
          <div id="map" class="map"></div>
        </div>
        <div class="col-md-5">
          <div class="row">
            <div class="col">
              <div id="graph1" class="graph"></div>
            </div>
          </div>
          <div class="row">
            <div class="col">
              <div id="graph2" class="graph"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

<script>
  function changeEndDate(event){
    var startDate = new Date(event.target.value);
    var endDate = new Date(document.getElementById('end_date').value);
    if(startDate > endDate){
      document.getElementById('end_date').value = event.target.value;
    }
  }
</script>

<script>
  var gData = <%- JSON.stringify(graphData) %>

  var trace1 = {
    x: gData.dateList,
    y: gData.valueList,
    type: 'lines'
  };

  var data = [trace1];

  var layout = {
    title: gData.title,
    xaxis: {
      autorange: true,
      type: 'date'
    },
    yaxis: {
      autorange: true,
      range: [0, 30],
      type: 'linear'
    }
  };

  Plotly.newPlot('graph1', data, layout);
  Plotly.newPlot('graph2', data, layout);
</script>

<script>
  class Basemap {
    constructor(rootTag, options) {
        options.center = L.latLngBounds(options.maxBounds).getCenter();
        this.map = L.map(rootTag, options);
        this.layer = {}
        this.layer.basemap = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}', {
            ext: 'png'
        });
        this.layer.geojson = [];
        this.marker = [];
        this.map.addLayer(this.layer.basemap);
    }
    addGeoJSON(geojson, options) {
        var geojsonLayer = L.geoJSON(geojson, options);
        this.map.addLayer(geojsonLayer);
        this.layer.geojson.push(geojsonLayer);

        
    }
    addTemperature(geojson) {
        var startDomain = 5;
        var endDomain = 35;
        var scale = chroma.scale('RdBu').domain([endDomain, startDomain]);
        this.addGeoJSON(geojson, {
            style: function (feature) {
                var s = {};
                s.fillColor = scale(feature.properties.value).hex();
                s.fillOpacity = 0.8;
                s.stroke = false;
                s.fillRule = 'nonzero';
                return s;
            }
        });

        var map = this.map;
        var legend = L.control({position: 'bottomright'});
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var colors = scale.colors(20);

            var gradient = '<i style="background: linear-gradient(to right'
            for(var i=0; i<colors.length; i++){
                gradient += ","+ colors[colors.length-1-i] + " " + (i*100/(colors.length-1)) +"%";
            }
            gradient += ');"></i><br>';

            div.innerHTML += gradient;
            div.innerHTML += startDomain
            for(var i=0; i<44; i++){
                div.innerHTML += "&nbsp;"
            }
            div.innerHTML += endDomain

            return div;
        };
        legend.addTo(map);
    }
    addPrecipitation(geojson) {
        var startDomain = 0;
        var endDomain = 150;
        var scale = chroma.scale('YlGnBu').domain([startDomain, endDomain]);
        this.addGeoJSON(geojson, {
            style: function (feature) {
                var s = {};
                s.fillColor = scale(feature.properties.value).hex();
                s.fillOpacity = 0.65;
                s.stroke = false;
                s.fillRule = 'nonzero';
                return s;
            }
        });
        
        var map = this.map;
        var legend = L.control({position: 'bottomright'});
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var colors = scale.colors(20);

            var gradient = '<i style="background: linear-gradient(to right'
            for(var i=0; i<colors.length; i++){
                gradient += ","+ colors[i] + " " + (i*100/(colors.length-1)) +"%";
            }
            gradient += ');"></i><br>';

            div.innerHTML += gradient;
            div.innerHTML += startDomain
            for(var i=0; i<43; i++){
                div.innerHTML += "&nbsp;"
            }
            div.innerHTML += endDomain

            return div;
        };
        legend.addTo(map);
    }
    addTemperatureStation(stationArray) {
        var icn = new L.Icon.Default;
        icn.options.iconSize = [10,20];
        icn.options.iconAnchor = [0,0];
        icn.options.shadowSize = [0,0];
        icn.options.popupAnchor = [5,0];
        for(let i=0; i < stationArray.length; i++) {
            let stationData = stationArray[i];
            var map = this.map
            
            let markerOptions = {
                title: stationData.code,
                icon: icn
            }
            let marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
                .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>Temperature: '+stationData.value+' Â°C');
            this.marker.push(marker);
        }
    }
    addPrecipitationStation(stationArray) {
        var icn = new L.Icon.Default;
        icn.options.iconSize = [10,20];
        icn.options.iconAnchor = [0,0];
        icn.options.shadowSize = [0,0];
        icn.options.popupAnchor = [5,0];
        for(let i=0; i < stationArray.length; i++) {
            let stationData = stationArray[i];
            var map = this.map
            let markerOptions = {
                title: stationData.code,
                icon: icn
            }
            let marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
                .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>Rain: '+((stationData.value==1)?'Fall':'Not fall'));
            this.marker.push(marker);
        }
    }
  }
</script>

<script>
  var map = new Basemap('map', {
      zoom: 4.3,
      minZoom: 4.3,
    maxZoom: 20,
      maxBounds: [[-14.8144, 89.4891],[26.9569, 146.5108]],
      preferCanvas: true
  });

  var attr = <%- JSON.stringify(attribute) %>
  var data = <%- JSON.stringify(geojson) %>
  var sData = <%- JSON.stringify(stationData) %>
  if(attr == 'tas'){
    map.addTemperature(data);
    map.addTemperatureStation(sData);
  } else if(attr == 'pr'){
    map.addPrecipitation(data);
    map.addPrecipitationStation(sData);
  }

</script>

  </body>
</html>
