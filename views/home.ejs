<!DOCTYPE html>
<html>
  <head>
    <% include partials/title %>
    <% include partials/bootstrap %>
    <% include partials/leaflet %>
    <% include partials/chroma %>
    <% include partials/plotly %>
    <% include partials/air-datepicker %>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <% page_name = 'home' %>
    <% include partials/navbar %>
    <div class="container-fluid">

      <div class="row">
        <div class="col">
          <h1>Climate Data Visualization</h1>
        </div>
      </div>

      <form action="/" method="GET">
      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="dataset" class="col-md-3 col-form-label">Dataset</label>
            <div class="col-md-9">
              <select id="dataset" name="dataset" class="form-control form-control-sm" onchange="changeDataset(event);">
                <option selected><%= selector[0].dataset %></option>
                <% for(var i=1; i<selector.length; i++){ %>
                  <option><%= selector[i].dataset %></option>
                <% } %>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-4">
          <div class="row">
            <label for="geoVariable" class="col-md-3 col-form-label">Geo Variable</label>
            <div class="col-md-9">
              <select id="geoVariable" name="geoVariable" class="form-control form-control-sm">
                <option selected value='<%= selector[0].geoVariables[0].name %>'><%= selector[0].geoVariables[0].longName %></option>
                <% for(var i=1; i<selector[0].geoVariables.length; i++){ %>
                  <option value='<%= selector[0].geoVariables[i].name %>'><%= selector[0].geoVariables[i].longName %> %></option>
                <% } %>
              </select>
            </div>
          </div>
        </div>

        <div class="col-md-4">
          <div class="row">
            <label for="stationVariable" class="col-md-2 col-form-label">Station</label>
            <div class="col-md-9">
              <select id="stationVariable" name="stationVariable" class="form-control form-control-sm">
                <option selected><%= selector[0].stationVariables[0] %></option>
                <% for(var i=1; i<selector[0].stationVariables.length; i++){ %>
                  <option><%= selector[0].stationVariables[i] %> %></option>
                <% } %>
              </select>
            </div>
          </div>
        </div>

      </div>

      <div class="row">

        <div class="col-md-3">
          <div class="row">
            <label for="frequency" class="col-md-3 col-form-label">Frequency</label>
            <div class="col-md-9">
              <select id="frequency" name="frequency" class="form-control form-control-sm" onchange="changeFrequency(event);">
                <option selected><%= selector[0].frequency[0] %></option>
                <% for(var i=1; i<selector[0].frequency.length; i++){ %>
                  <option><%= selector[0].frequency[i] %> %></option>
                <% } %>
              </select>
            </div>

          </div>
        </div>

        <div class="col-md-4">
          <div class="row">

            <label for="date" class="col-md-3 col-form-label">Date</label>
            <div class="col-md-9">
              <input type="text" id='date' name='date' 
                class="form-control form-control-sm datepicker-here"
                data-language='en'
                data-position='bottom left'/>
            </div>

          </div>
        </div>

        <div class="col-md-3">
          <button type="submit" class="btn btn-primary">Visualize</button>
        </div>

      </div>
      </form>

      <div class='collapse' id='datepicker-collapse'>
        <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
      </div>

      <div class="row">
        <div class="col-md-7">
          <div id="map" class="map"></div>
        </div>
        <div class="col-md-5">
          <div class="row">
            <div class="col">
              <div id="graphData" class="graph"></div>
            </div>
          </div>
          <div class="row">
            <div class="col">
              <div id="graphEachMonth" class="graph"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

<script>

  var selector_data = <%- JSON.stringify(selector) %>
  var selector_group = {}
  for(let i=0; i<selector_data.length; i++){ // convert array to json
    selector_group[selector_data[i].dataset] = selector_data[i]
  }

  function expand(){
    //document.getElementById('datepicker-collapse').innerHTML = '<br><br><br><br><br><br><br><br><br><br><br><br>'
    $('#datepicker-collapse').collapse('show');
  }
  function collapse(){
    //document.getElementById('datepicker-collapse').innerHTML = ''
    $('#datepicker-collapse').collapse('hide');
  }
  var datepickerOptions = {
    language: 'en',
    minView: 'years',
    view: 'years',
    dateFormat: 'yyyy',
    range: true,
    multipleDatesSeparator: ' to ',
    minDate: new Date(selector_data[0].date.min),
    maxDate: new Date(selector_data[0].date.max),
    position: 'bottom left',
    onShow: function(dp, animationComplete){
      expand();
    },
    onHide: function(dp, animationComplete){
      collapse();
    }
  }
  var dpicker;
  var startDate = datepickerOptions.minDate;
  var endDate = datepickerOptions.maxDate;
  setTimeout(function(){
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }, 500);

  function changeDataset(event){
    var selected = selector_group[event.target.value];
    
    var geoVariableSelector = document.getElementById('geoVariable')
    while(geoVariableSelector.options.length){
      geoVariableSelector.remove(0);
    }
    for(let i=0; i<selected.geoVariables.length; i++){
      let option = document.createElement("option");
      option.value = selected.geoVariables[i].name;
      option.text = selected.geoVariables[i].longName;
      geoVariableSelector.add(option);
    }

    var stationVariableSelector = document.getElementById('stationVariable')
    while(stationVariableSelector.options.length){
      stationVariableSelector.remove(0);
    }
    for(let i=0; i<selected.stationVariables.length; i++){
      let option = document.createElement("option");
      option.text = selected.stationVariables[i];
      stationVariableSelector.add(option);
    }

    datepickerOptions.minDate = new Date(selected.date.min);
    datepickerOptions.maxDate = new Date(selected.date.max);
    startDate = datepickerOptions.minDate;
    endDate = datepickerOptions.maxDate;
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }

  function changeFrequency(event){
    var frequency = event.target.value;
    var date = document.getElementById('date').value;
    startDate = new Date(date.split(' to ')[0]);
    endDate = new Date(date.split(' to ')[1]);
    if(frequency == 'Yearly'){
      datepickerOptions.minView = 'years';
      datepickerOptions.view = 'years';
      datepickerOptions.dateFormat = 'yyyy'
    } else if(frequency == 'Monthly'){
      datepickerOptions.minView = 'months';
      datepickerOptions.view = 'months';
      datepickerOptions.dateFormat = 'yyyy-mm'
    } else if(frequency == 'Daily'){
      datepickerOptions.minView = 'days';
      datepickerOptions.view = 'days';
      datepickerOptions.dateFormat = 'yyyy-mm-dd'
    }
    dpicker = $('#date').datepicker(datepickerOptions).data('datepicker');
    dpicker.selectDate([startDate, endDate]);
  }

  
</script>

<script>
  /* graph data */
  var gData = <%- JSON.stringify(graphData) %>
  var trace = {
    x: gData.dateList,
    y: gData.valueList,
    type: 'lines'
  };

  var data = [trace];

  var layout = {
    title: gData.title,
    xaxis: {
      autorange: true,
    },
    yaxis: {
      autorange: true,
      range: [0, 30],
      type: 'linear'
    }
  };
  Plotly.newPlot('graphData', data, layout);

  /* graph each month */
  var gEachMonth = <%- JSON.stringify(graphEachMonthData) %>
  trace = {
    x: gEachMonth.monthList,
    y: gEachMonth.valueList,
    type: 'lines'
  };

  data = [trace];

  layout = {
    title: gEachMonth.title,
    xaxis: {
      autorange: true,
      type: 'string'
    },
    yaxis: {
      autorange: true,
      range: [0, 30],
      type: 'linear'
    }
  };
  Plotly.newPlot('graphEachMonth', data, layout);
</script>

<script>
  class Basemap {
    constructor(rootTag, options) {
        options.center = L.latLngBounds(options.maxBounds).getCenter();
        this.map = L.map(rootTag, options);
        this.layer = {}
        this.layer.basemap = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}', {
            ext: 'png'
        });
        this.layer.geojson = [];
        this.marker = [];
        this.map.addLayer(this.layer.basemap);
    }
    addGeoJSON(geojson, options) {
        var geojsonLayer = L.geoJSON(geojson, options);
        this.map.addLayer(geojsonLayer);
        this.layer.geojson.push(geojsonLayer);

        
    }
    addTemperature(geojson) {
        var startDomain = 5;
        var endDomain = 35;
        var scale = chroma.scale('RdBu').domain([endDomain, startDomain]);
        this.addGeoJSON(geojson, {
            style: function (feature) {
                var s = {};
                s.fillColor = scale(feature.properties.value).hex();
                s.fillOpacity = 0.8;
                s.stroke = false;
                s.fillRule = 'nonzero';
                return s;
            }
        });

        var map = this.map;
        var legend = L.control({position: 'bottomright'});
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var colors = scale.colors(20);

            var gradient = '<i style="background: linear-gradient(to right'
            for(var i=0; i<colors.length; i++){
                gradient += ","+ colors[colors.length-1-i] + " " + (i*100/(colors.length-1)) +"%";
            }
            gradient += ');"></i><br>';

            div.innerHTML += gradient;
            div.innerHTML += startDomain
            for(var i=0; i<44; i++){
                div.innerHTML += "&nbsp;"
            }
            div.innerHTML += endDomain

            return div;
        };
        legend.addTo(map);
    }
    addPrecipitation(geojson) {
        var startDomain = 0;
        var endDomain = 150;
        var scale = chroma.scale('YlGnBu').domain([startDomain, endDomain]);
        this.addGeoJSON(geojson, {
            style: function (feature) {
                var s = {};
                s.fillColor = scale(feature.properties.value).hex();
                s.fillOpacity = 0.65;
                s.stroke = false;
                s.fillRule = 'nonzero';
                return s;
            }
        });
        
        var map = this.map;
        var legend = L.control({position: 'bottomright'});
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var colors = scale.colors(20);

            var gradient = '<i style="background: linear-gradient(to right'
            for(var i=0; i<colors.length; i++){
                gradient += ","+ colors[i] + " " + (i*100/(colors.length-1)) +"%";
            }
            gradient += ');"></i><br>';

            div.innerHTML += gradient;
            div.innerHTML += startDomain
            for(var i=0; i<43; i++){
                div.innerHTML += "&nbsp;"
            }
            div.innerHTML += endDomain

            return div;
        };
        legend.addTo(map);
    }
    addTemperatureStation(stationArray) {
        var icn = new L.Icon.Default;
        icn.options.iconSize = [10,20];
        icn.options.iconAnchor = [0,0];
        icn.options.shadowSize = [0,0];
        icn.options.popupAnchor = [5,0];
        for(let i=0; i < stationArray.length; i++) {
            let stationData = stationArray[i];
            var map = this.map
            
            let markerOptions = {
                title: stationData.code,
                icon: icn
            }
            let marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
                .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>Temperature: '+stationData.value+' °C');
            this.marker.push(marker);
        }
    }
    addPrecipitationStation(stationArray) {
        var icn = new L.Icon.Default;
        icn.options.iconSize = [10,20];
        icn.options.iconAnchor = [0,0];
        icn.options.shadowSize = [0,0];
        icn.options.popupAnchor = [5,0];
        for(let i=0; i < stationArray.length; i++) {
            let stationData = stationArray[i];
            var map = this.map
            let markerOptions = {
                title: stationData.code,
                icon: icn
            }
            let marker = L.marker([stationData.lat, stationData.lon], markerOptions).addTo(map)
                .bindPopup('Station: '+stationData.code+'<br>Lat: '+stationData.lat+'<br>Lon: '+stationData.lon+'<br>Rain: '+((stationData.value==1)?'Fall':'Not fall'));
            this.marker.push(marker);
        }
    }
  }
</script>

<script>
  var map = new Basemap('map', {
      zoom: 4.3,
      minZoom: 4.3,
    maxZoom: 20,
      maxBounds: [[-14.8144, 89.4891],[26.9569, 146.5108]],
      preferCanvas: true
  });

  var attr = <%- JSON.stringify(selector[0].geoVariables[0].name) %>
  var data = <%- JSON.stringify(geojson) %>
  var sData = <%- JSON.stringify(stationData) %>
  if(attr == 'tas'){
    map.addTemperature(data);
    map.addTemperatureStation(sData);
  } else if(attr == 'pr'){
    map.addPrecipitation(data);
    map.addPrecipitationStation(sData);
  }

</script>

  </body>
</html>
